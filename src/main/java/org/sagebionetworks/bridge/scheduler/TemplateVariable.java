package org.sagebionetworks.bridge.scheduler;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;

/**
 * Template variables, to be used in the request template for scheduled events. These are used to determine start and
 * end date/times for scheduled events.
 */
public enum TemplateVariable {
    /** The last millisecond of the previous day. Example: 2018-03-20T23:59:59.999-07:00. */
    END_OF_PREVIOUS_DAY("endOfPreviousDay") {
        @Override
        protected String getReplacementValue(DateTime processTimeLocal) {
            return processTimeLocal.minusDays(1).withHourOfDay(23).withMinuteOfHour(59).withSecondOfMinute(59)
                    .withMillisOfSecond(999).toString();
        }
    },

    /**
     * <p>
     * The process time of the scheduled event, as generated by the cron schedule.
     * Example: 2018-03-21T17:09:00.000-07:00.
     * </p>
     * <p>
     * This is used extensively by unit tests.
     * </p>
     */
    PROCESS_TIME("processTime") {
        @Override
        protected String getReplacementValue(DateTime processTimeLocal) {
            return processTimeLocal.toString();
        }
    },

    /** The start of the current day. Example: 2018-03-21T00:00:00.000-07:00. */
    START_OF_DAY("startOfDay") {
        @Override
        protected String getReplacementValue(DateTime processTimeLocal) {
            return processTimeLocal.withTimeAtStartOfDay().toString();
        }
    },

    /** The start of the day one week ago. Example: 2018-03-14T00:00:00.000-07:00. */
    START_OF_DAY_ONE_WEEK_AGO("startOfDayOneWeekAgo") {
        @Override
        protected String getReplacementValue(DateTime processTimeLocal) {
            return processTimeLocal.minusDays(7).withTimeAtStartOfDay().toString();
        }
    },

    /** The start of the current hour. Example: 2018-03-21T17:00:00.000-07:00. */
    START_OF_HOUR("startOfHour") {
        @Override
        protected String getReplacementValue(DateTime processTimeLocal) {
            return processTimeLocal.withMinuteOfHour(0).withSecondOfMinute(0).withMillisOfSecond(0).toString();
        }
    },

    /** The start of the previous day. Example: 2018-03-20T00:00:00.000-07:00. */
    START_OF_PREVIOUS_DAY("startOfPreviousDay") {
        @Override
        protected String getReplacementValue(DateTime processTimeLocal) {
            return processTimeLocal.minusDays(1).withTimeAtStartOfDay().toString();
        }
    },

    /** Today's date (as a calendar date rather than as a timestamp). Example: 2018-03-21. */
    TODAYS_DATE("todaysDate") {
        @Override
        protected String getReplacementValue(DateTime processTimeLocal) {
            return processTimeLocal.toLocalDate().toString();
        }
    },

    /** Yesterday's date (as a calendar date rather than as a timestamp). Example: 2018-03-20. */
    YESTERDAYS_DATE("yesterdaysDate") {
        @Override
        protected String getReplacementValue(DateTime processTimeLocal) {
            return processTimeLocal.minusDays(1).toLocalDate().toString();
        }
    };

    // For now, scheduler will assume Seattle time for calculating date.
    private static final DateTimeZone LOCAL_TIME_ZONE = DateTimeZone.forID("America/Los_Angeles");

    private String varPattern;

    /**
     * Private constructor. Takes in the template variables display name (camelCased) and generates the replacement
     * pattern used in request templates. For example, "${startOfDay}" or "{$yesterdaysDate}".
     */
    TemplateVariable(String varName) {
        varPattern = "${" + varName + "}";
    }

    /** Get the replacement value of the template variable, using the schedule's process time in the local timezone. */
    protected abstract String getReplacementValue(DateTime processTimeLocal);

    /**
     * Given the template and the schedule's process time in UTC, find and replace all instances of the template
     * variable with its replacement value.
     */
    public String resolve(String template, DateTime processTimeUtc) {
        // Convert process time to local timezone, since all of the date calculations are based on local time zone.
        DateTime processTimeLocal = processTimeUtc.withZone(LOCAL_TIME_ZONE);

        // Resolve the variable and replace the variable in the template.
        String replacement = getReplacementValue(processTimeLocal);
        return template.replace(varPattern, replacement);
    }
}
